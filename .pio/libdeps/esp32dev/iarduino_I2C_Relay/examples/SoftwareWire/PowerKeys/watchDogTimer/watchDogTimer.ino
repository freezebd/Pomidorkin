// ДАННЫЙ ПРИМЕР ДЕМОНСТРИРУЕТ ЗАЩИТУ ОТ ЗАВИСАНИЯ ШИНЫ ИЛИ ARDUINO:     // * Строки со звёздочкой являются необязательными.
// Требуется установить библиотеку <iarduino_I2C_Software.h>             //   https://iarduino.ru/file/627.html
                                                                         //
// Модуль силовых ключей 4N-канала 10A FLASH-I2C без измерения тока:     //   https://iarduino.ru/shop/Expansion-payments/power-key-4n-i2c.html
// Информация о модуле и описание библиотеки:                            //   https://wiki.iarduino.ru/page/power-key-4n-i2c/
                                                                         //
// Модуль силовых ключей 4P-канала 10A FLASH-I2C без измерения тока:     //   https://iarduino.ru/shop/Expansion-payments/power-key-4p-i2c.html
// Информация о модуле и описание библиотеки:                            //   https://wiki.iarduino.ru/page/power-key-4p-i2c/
                                                                         //
// Информация о подключении модулей к шине I2C:                          //   https://wiki.iarduino.ru/page/i2c_connection/
                                                                         //
#include <iarduino_I2C_Software.h>                                       //   Подключаем библиотеку для работы с программной шиной I2C, до подключения библиотеки iarduino_I2C_Relay.
SoftTwoWire sWire(3,4);                                                  //   Создаём объект программной шины I2C указав выводы которым будет назначена роль линий: SDA, SCL.
                                                                         //
#include <iarduino_I2C_Relay.h>                                          //   Подключаем библиотеку для работы с реле и силовыми ключами.
iarduino_I2C_Relay pwrkey(0x09);                                         //   Объявляем объект pwrkey для работы с функциями и методами библиотеки iarduino_I2C_Relay, указывая адрес модуля на шине I2C.
                                                                         //   Если объявить объект без указания адреса (iarduino_I2C_Relay pwrkey;), то адрес будет найден автоматически.
void setup(){                                                            //
    Serial.begin(9600);                                                  //   Инициируем передачу данных в монитор последовательного порта на скорости 9600 бит/сек.
    while(!Serial){;}                                                    // * Ждём завершения инициализации шины UART.
    delay(500);                                                          // * Ждём завершение переходных процессов связанных с подачей питания.
//  Готовим модуль к работе:                                             //
    pwrkey.begin(&sWire);                                                //   Инициируем работу с модулем, указав ссылку на объект для работы с шиной I2C на которой находится модуль (по умолчанию &Wire).
    pwrkey.enableWDT(5);                                                 //   Разрешаем работу сторожевого таймера модуля, задав время до перезагрузки 5 сек.
}                                                                        //   Отключить работу сторожевого таймера модуля можно функцией disableWDT().
                                                                         //
void loop(){                                                             //
//  Переключаем 1 и 2 каналы модуля:                                     //
    pwrkey.digitalWrite(1,HIGH); pwrkey.digitalWrite(2,LOW); delay(500); //   Включаем 1 канал, выключаем 2 канал и ждём 500 мс.
    pwrkey.digitalWrite(2,HIGH); pwrkey.digitalWrite(1,LOW); delay(500); //   Включаем 2 канал, выключаем 1 канал и ждём 500 мс.
//  Сбрасываем (перезапускаем) сторожевой таймер модуля:                 //
    pwrkey.resetWDT();                                                   //   Теперь таймер модуля начнёт заново отсчитывать 5 секунд до перезагрузки.
//  Сообщаем, что сработал сторожевой таймер:                            // * 
    if( pwrkey.getStateWDT() == false ){ Serial.println("ERROR"); }      // * Если таймер отключился, значит он досчитал до 0 и перезагрузил модуль отключив все его каналы.
}                                                                        //   Если модуль не отвечает (отключилась шина I2C), то функция getStateWDT() так же вернёт false.
                                                                         //
/*  *******************************************************************
    ПРИМЕЧАНИЕ:
    Время назначенное сторожевому таймеру функцией enableWDT(),               (в примере назначено 5 секунд)
    должно быть больше чем время между вызовами функции resetWDT().           (в примере функция resetWDT вызывается один раз в секунду)

    ПРОВЕРКА:
    Если во время работы отключить вывод SDA или SCL шины I2C, то каналы
    перестанут переключаться, но 1 из каналов модуля останется включённым.
    Подождав от 4 до 5 секунд, сработает таймер и все каналы отключатся.      (время ожидания зависит от того, в каком месте выполнения кода был отключён вывод)
*/